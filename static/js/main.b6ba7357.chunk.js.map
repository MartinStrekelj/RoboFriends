{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNAeeA,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,yBAAKC,UAAU,OACX,2BACAA,UAAU,mCACVC,KAAM,SACNC,YAAY,oBACZC,SAAYJ,MCUTK,EAhBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAG1B,OAEI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAI,YAAYC,IAAG,+BAA0BF,EAA1B,aAExB,6BACI,4BAAKF,GACL,2BAAIC,OCsBLI,EApBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACb,OACG,kBAAC,EAAD,CACAC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCbtBU,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,WCiBAC,E,YApBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAW,GAHD,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAI3B,OAAKG,KAAKJ,MAAMC,SACL,2DAEJG,KAAKX,MAAMK,a,GAhBCQ,aC4DZC,E,YA1CX,aAAc,IAAD,8BACT,+CAcJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAC/B,YAAamC,EAAMC,OAAOC,SAdzC,EAAKX,MAAQ,CAETb,OAAQ,GACRb,YAAa,IALR,E,iFASO,IAAD,OACfsC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAClB,OAAQ6B,S,+BAOhC,IAAD,EAC2BZ,KAAKJ,MAA7B1B,EADH,EACGA,YAAaa,EADhB,EACgBA,OACf8B,EAAe9B,EAAO+B,QAAO,SAAAC,GAC/B,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS/C,EAAY8C,kBAEzD,OAAKjC,EAAOmC,OAIJ,yBAAK9C,UAAW,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAe6B,KAAKI,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAQ8B,OAR3B,8C,GA1BDX,aCPEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.b6ba7357.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type =\"search\"\r\n            placeholder=\"Search for Robots\"\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Card = ({ name , email, id }) =>{\r\n    // Destructuring\r\n    // const  { name , email, id } = props;\r\n    return (\r\n        // You can only return one thing! one div ; one h1 ,...\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"roboimage\" src={`https://robohash.org/${id}200x200`}>\r\n            </img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\n// ALTERNATIVE\r\n// Create robots list\r\n// const cardComponent = robots.map((user, i) => {\r\n//     return (<Card \r\n//     key={i}\r\n//     id={robots[i].id}\r\n//     name={robots[i].name}\r\n//     email={robots[i].email}\r\n//     />\r\n//     )\r\n\r\n\r\nconst CardList = ({robots}) =>  {\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n                 return (\r\n                    <Card\r\n                    key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                     />\r\n                 );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// Children\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:\"scroll\", border:\"3px solid black\", height:\"800px\"}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError : true });\r\n    }\r\n\r\n    render(){\r\n        if ( this.state.hasError ){\r\n            return <h1>Oops! Something went wrong.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\n\r\n\r\n\r\n// const App = () => {\r\n//     return (\r\n//         <div className= \"tc\">\r\n//             <h1 className=\"f1\">RoboFriends</h1>\r\n//             <SearchBox/>\r\n//             <CardList robots={robots} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            // Having a state >> SMART COMPONENT\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event) => { \r\n        this.setState({searchfield: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { searchfield, robots } = this.state; // Destructering\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if (!robots.length){\r\n            return <h1>Loading...</h1>\r\n        }else{\r\n            return (\r\n                <div className= \"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange= {this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }    \r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}